{"version":3,"sources":["../node_modules/react-transition-group/esm/TransitionGroupContext.js","../node_modules/dom-helpers/esm/removeClass.js","../node_modules/react-transition-group/esm/config.js","../node_modules/react-transition-group/esm/Transition.js","../node_modules/react-transition-group/esm/CSSTransition.js","../node_modules/dom-helpers/esm/addClass.js","../node_modules/dom-helpers/esm/hasClass.js","../node_modules/react-transition-group/esm/utils/ChildMapping.js","../node_modules/react-transition-group/esm/TransitionGroup.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","__webpack_exports__","a","createContext","replaceClassName","origClass","classToRemove","replace","RegExp","config","UNMOUNTED","EXITED","ENTERING","ENTERED","Transition_Transition","_React$Component","Transition","props","context","_this","call","this","initialStatus","appear","isMounting","enter","appearStatus","in","unmountOnExit","mountOnEnter","state","status","nextCallback","Object","inheritsLoose","getDerivedStateFromProps","_ref","prevState","_proto","prototype","componentDidMount","updateStatus","componentDidUpdate","prevProps","nextStatus","componentWillUnmount","cancelNextCallback","getTimeouts","exit","timeout","undefined","mounting","performEnter","performExit","setState","_this2","appearing","_ref2","nodeRef","react_dom_default","findDOMNode","maybeNode","maybeAppearing","timeouts","enterTimeout","safeSetState","onEntered","onEnter","onEntering","onTransitionEnd","_this3","onExit","onExiting","onExited","cancel","nextState","callback","setNextCallback","_this4","active","event","handler","node","current","doesNotHaveTimeoutOrListener","addEndListener","_ref3","maybeNextCallback","setTimeout","render","_this$props","children","childProps","objectWithoutPropertiesLoose","react_default","createElement","TransitionGroupContext","Provider","value","cloneElement","Children","only","Component","noop","contextType","propTypes","defaultProps","EXITING","esm_Transition","CSSTransition_removeClass","classes","split","forEach","c","className","element","classList","remove","setAttribute","baseVal","CSSTransition_CSSTransition","CSSTransition","_len","arguments","length","args","Array","_key","apply","concat","appliedClasses","_this$resolveArgument","resolveArguments","removeClasses","addClass","_this$resolveArgument2","type","_this$resolveArgument3","getClassNames","classNames","isStringClassNames","baseClassName","activeClassName","doneClassName","phase","scrollTop","add","contains","indexOf","hasClass","_addClass","_this$appliedClasses$","base","done","esm_extends","getChildMapping","mapFn","result","create","react","map","child","key","mapper","getProp","prop","getNextChildMapping","nextProps","prevChildMapping","nextChildMapping","prev","next","getValueForKey","i","nextKeysPending","pendingKeys","prevKey","push","childMapping","nextKey","pendingNextKey","mergeChildMappings","keys","hasPrev","hasNext","prevChild","isLeaving","bind","values","obj","k","TransitionGroup_TransitionGroup","TransitionGroup","handleExited","assertThisInitialized","contextValue","firstRender","mounted","currentChildMapping","component","childFactory"],"mappings":"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","file":"static/js/41.27e60a39.chunk.js","sourcesContent":["import React from 'react';\nexport default React.createContext(null);","function replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n}\n\nexport default function removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === 'string') {\n    ;\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));\n  }\n}","export default {\n  disabled: false\n};","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  } // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n  ;\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n\n    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],\n        maybeNode = _ref2[0],\n        maybeAppearing = _ref2[1];\n\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n\n      _this2.onTransitionEnd(enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(maybeNode);\n\n      _this3.onTransitionEnd(timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],\n          maybeNode = _ref3[0],\n          maybeNextCallback = _ref3[1];\n\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        _in = _this$props.in,\n        _mountOnEnter = _this$props.mountOnEnter,\n        _unmountOnExit = _this$props.unmountOnExit,\n        _appear = _this$props.appear,\n        _enter = _this$props.enter,\n        _exit = _this$props.exit,\n        _timeout = _this$props.timeout,\n        _addEndListener = _this$props.addEndListener,\n        _onEnter = _this$props.onEnter,\n        _onEntering = _this$props.onEntering,\n        _onEntered = _this$props.onEntered,\n        _onExit = _this$props.onExit,\n        _onExiting = _this$props.onExiting,\n        _onExited = _this$props.onExited,\n        _nodeRef = _this$props.nodeRef,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n\n    return (\n      /*#__PURE__*/\n      // allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A React reference to DOM element that need to transition:\n   * https://stackoverflow.com/a/51127130/4671932\n   *\n   *   - When `nodeRef` prop is used, `node` is not passed to callback functions\n   *      (e.g. `onEnter`) because user already has direct access to the node.\n   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new\n   *     `nodeRef` need to be provided to `Transition` with changed `key` prop\n   *     (see\n   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).\n   */\n  nodeRef: PropTypes.shape({\n    current: typeof Element === 'undefined' ? PropTypes.any : PropTypes.instanceOf(Element)\n  }),\n\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * By default the child component does not perform the enter transition when\n   * it first mounts, regardless of the value of `in`. If you want this\n   * behavior, set both `appear` and `in` to `true`.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. Timeouts are still used as a fallback if provided.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func\n} : {}; // Name the function so it is clearer in the documentation\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\nexport default Transition;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/addClass';\nimport removeOneClass from 'dom-helpers/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    var _this$getClassNames = this.getClassNames('enter'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === 'appear' && phase === 'done' && doneClassName) {\n      className += \" \" + doneClassName;\n    } // This is for to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      /* eslint-disable no-unused-expressions */\n      node && node.scrollTop;\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","import hasClass from './hasClass';\nexport default function addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + \" \" + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + \" \" + className);\n}","export default function hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);\n  return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}","import { Children, cloneElement, isValidElement } from 'react';\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {*} children `this.props.children`\n * @return {object} Mapping of key to child\n */\n\nexport function getChildMapping(children, mapFn) {\n  var mapper = function mapper(child) {\n    return mapFn && isValidElement(child) ? mapFn(child) : child;\n  };\n\n  var result = Object.create(null);\n  if (children) Children.map(children, function (c) {\n    return c;\n  }).forEach(function (child) {\n    // run the map function here instead so that the key is the computed one\n    result[child.key] = mapper(child);\n  });\n  return result;\n}\n/**\n * When you're adding or removing children some may be added or removed in the\n * same render pass. We want to show *both* since we want to simultaneously\n * animate elements in and out. This function takes a previous set of keys\n * and a new set of keys and merges them with its best guess of the correct\n * ordering. In the future we may expose some of the utilities in\n * ReactMultiChild to make this easy, but for now React itself does not\n * directly have this concept of the union of prevChildren and nextChildren\n * so we implement it here.\n *\n * @param {object} prev prev children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @param {object} next next children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @return {object} a key set that contains all keys in `prev` and all keys\n * in `next` in a reasonable order.\n */\n\nexport function mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  } // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n\n  var nextKeysPending = Object.create(null);\n  var pendingKeys = [];\n\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n\n  var i;\n  var childMapping = {};\n\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n\n    childMapping[nextKey] = getValueForKey(nextKey);\n  } // Finally, add the keys which didn't appear before any key in `next`\n\n\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n\n  return childMapping;\n}\n\nfunction getProp(child, prop, props) {\n  return props[prop] != null ? props[prop] : child.props[prop];\n}\n\nexport function getInitialChildMapping(props, onExited) {\n  return getChildMapping(props.children, function (child) {\n    return cloneElement(child, {\n      onExited: onExited.bind(null, child),\n      in: true,\n      appear: getProp(child, 'appear', props),\n      enter: getProp(child, 'enter', props),\n      exit: getProp(child, 'exit', props)\n    });\n  });\n}\nexport function getNextChildMapping(nextProps, prevChildMapping, onExited) {\n  var nextChildMapping = getChildMapping(nextProps.children);\n  var children = mergeChildMappings(prevChildMapping, nextChildMapping);\n  Object.keys(children).forEach(function (key) {\n    var child = children[key];\n    if (!isValidElement(child)) return;\n    var hasPrev = (key in prevChildMapping);\n    var hasNext = (key in nextChildMapping);\n    var prevChild = prevChildMapping[key];\n    var isLeaving = isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)\n\n    if (hasNext && (!hasPrev || isLeaving)) {\n      // console.log('entering', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: true,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    } else if (!hasNext && hasPrev && !isLeaving) {\n      // item is old (exiting)\n      // console.log('leaving', key)\n      children[key] = cloneElement(child, {\n        in: false\n      });\n    } else if (hasNext && hasPrev && isValidElement(prevChild)) {\n      // item hasn't changed transition states\n      // copy over the last transition props;\n      // console.log('unchanged', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: prevChild.props.in,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    }\n  });\n  return children;\n}","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { getChildMapping, getInitialChildMapping, getNextChildMapping } from './utils/ChildMapping';\n\nvar values = Object.values || function (obj) {\n  return Object.keys(obj).map(function (k) {\n    return obj[k];\n  });\n};\n\nvar defaultProps = {\n  component: 'div',\n  childFactory: function childFactory(child) {\n    return child;\n  }\n};\n/**\n * The `<TransitionGroup>` component manages a set of transition components\n * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\n * components, `<TransitionGroup>` is a state machine for managing the mounting\n * and unmounting of components over time.\n *\n * Consider the example below. As items are removed or added to the TodoList the\n * `in` prop is toggled automatically by the `<TransitionGroup>`.\n *\n * Note that `<TransitionGroup>`  does not define any animation behavior!\n * Exactly _how_ a list item animates is up to the individual transition\n * component. This means you can mix and match animations across different list\n * items.\n */\n\nvar TransitionGroup = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(TransitionGroup, _React$Component);\n\n  function TransitionGroup(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear\n\n\n    _this.state = {\n      contextValue: {\n        isMounting: true\n      },\n      handleExited: handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n\n  var _proto = TransitionGroup.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.setState({\n      contextValue: {\n        isMounting: false\n      }\n    });\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n\n  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children,\n        handleExited = _ref.handleExited,\n        firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  } // node is `undefined` when user provided `nodeRef` prop\n  ;\n\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = getChildMapping(this.props.children);\n    if (child.key in currentChildMapping) return;\n\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n\n    if (this.mounted) {\n      this.setState(function (state) {\n        var children = _extends({}, state.children);\n\n        delete children[child.key];\n        return {\n          children: children\n        };\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Component = _this$props.component,\n        childFactory = _this$props.childFactory,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\n\n    var contextValue = this.state.contextValue;\n    var children = values(this.state.children).map(childFactory);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n\n    if (Component === null) {\n      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n        value: contextValue\n      }, children);\n    }\n\n    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/React.createElement(Component, props, children));\n  };\n\n  return TransitionGroup;\n}(React.Component);\n\nTransitionGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\n   * behavior by providing a `component` prop.\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\n   * you can pass in `component={null}`. This is useful if the wrapping div\n   * borks your css styles.\n   */\n  component: PropTypes.any,\n\n  /**\n   * A set of `<Transition>` components, that are toggled `in` and out as they\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\n   * remember to spread them through if you are wrapping the `<Transition>` as\n   * with our `<Fade>` example.\n   *\n   * While this component is meant for multiple `Transition` or `CSSTransition`\n   * children, sometimes you may want to have a single transition child with\n   * content that you want to be transitioned out and in when you change it\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\n   * the transition child as you change its content, this will cause\n   * `TransitionGroup` to transition the child out and back in.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A convenience prop that enables or disables appear animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables enter animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables exit animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * You may need to apply reactive updates to a child as it is exiting.\n   * This is generally done by using `cloneElement` however in the case of an exiting\n   * child the element has already been removed and not accessible to the consumer.\n   *\n   * If you do need to update a child as it leaves you can provide a `childFactory`\n   * to wrap every child, even the ones that are leaving.\n   *\n   * @type Function(child: ReactElement) -> ReactElement\n   */\n  childFactory: PropTypes.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\nexport default TransitionGroup;"],"sourceRoot":""}